#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

RWTexture2D<float4> _RenderTarget;

#pragma max_recursion_depth 1

float3 RayColor(RayDesc r)
{
    float t = 0.5 * (r.Direction.y + 1.0);
    return lerp(float3(0.5, 0.7, 1.0), 1.0, t);
}

[shader("raygeneration")]
void MainRaygenShader()
{
    // Image
    uint2 dispatchIdx = DispatchRaysIndex().xy;
    uint2 dispatchDim = DispatchRaysDimensions().xy;
    const float aspectRatio = (float)dispatchDim.x / dispatchDim.y;

    
    // Camera
    float viewportHeight = 2.0;
    float viewportWidth = aspectRatio * viewportHeight;
    float focalLength = 1.0;

    float3 origin = 0.0;
    float3 horizontal = float3(viewportWidth, 0.0, 0.0);
    float3 vertical = float3(0.0, viewportHeight, 0.0);
    float3 lowerLeftCorner = origin - horizontal/2 + vertical/2 - float3(0.0, 0.0, focalLength);

    // Render
    float2 uv = (float2)dispatchIdx / dispatchDim;
    RayDesc r;
    r.Origin = origin;
    r.Direction = normalize(lowerLeftCorner + uv.x * horizontal - uv.y * vertical - origin);
    r.TMin = 0.3;
    r.TMax = 1000.0;

    float3 pixelColor = RayColor(r);

    _RenderTarget[dispatchIdx] = float4(pixelColor, 1.0);
}